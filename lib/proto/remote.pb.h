/* Automatically generated nanopb header */
/* Generated by nanopb-0.4.5 */

#ifndef PB_PROMETHEUS_REMOTE_PB_H_INCLUDED
#define PB_PROMETHEUS_REMOTE_PB_H_INCLUDED
#include <pb.h>
#include "types.pb.h"

#if PB_PROTO_HEADER_VERSION != 40
#error Regenerate this file with the current version of nanopb generator.
#endif

/* Enum definitions */
typedef enum _prometheus_MetricMetadata_MetricType { 
    prometheus_MetricMetadata_MetricType_UNKNOWN = 0, 
    prometheus_MetricMetadata_MetricType_COUNTER = 1, 
    prometheus_MetricMetadata_MetricType_GAUGE = 2, 
    prometheus_MetricMetadata_MetricType_HISTOGRAM = 3, 
    prometheus_MetricMetadata_MetricType_GAUGEHISTOGRAM = 4, 
    prometheus_MetricMetadata_MetricType_SUMMARY = 5, 
    prometheus_MetricMetadata_MetricType_INFO = 6, 
    prometheus_MetricMetadata_MetricType_STATESET = 7 
} prometheus_MetricMetadata_MetricType;

/* Struct definitions */
typedef struct _prometheus_WriteRequest { 
    pb_callback_t timeseries; 
    pb_callback_t metadata; 
} prometheus_WriteRequest;

typedef struct _prometheus_MetricMetadata { 
    /* Represents the metric type, these match the set from Prometheus.
 Refer to pkg/textparse/interface.go for details. */
    prometheus_MetricMetadata_MetricType type; 
    pb_callback_t metric_family_name; 
    pb_callback_t help; 
    pb_callback_t unit; 
} prometheus_MetricMetadata;


/* Helper constants for enums */
#define _prometheus_MetricMetadata_MetricType_MIN prometheus_MetricMetadata_MetricType_UNKNOWN
#define _prometheus_MetricMetadata_MetricType_MAX prometheus_MetricMetadata_MetricType_STATESET
#define _prometheus_MetricMetadata_MetricType_ARRAYSIZE ((prometheus_MetricMetadata_MetricType)(prometheus_MetricMetadata_MetricType_STATESET+1))


#ifdef __cplusplus
extern "C" {
#endif

/* Initializer values for message structs */
#define prometheus_MetricMetadata_init_default   {_prometheus_MetricMetadata_MetricType_MIN, {{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}}
#define prometheus_WriteRequest_init_default     {{{NULL}, NULL}, {{NULL}, NULL}}
#define prometheus_MetricMetadata_init_zero      {_prometheus_MetricMetadata_MetricType_MIN, {{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}}
#define prometheus_WriteRequest_init_zero        {{{NULL}, NULL}, {{NULL}, NULL}}

/* Field tags (for use in manual encoding/decoding) */
#define prometheus_WriteRequest_timeseries_tag   1
#define prometheus_WriteRequest_metadata_tag     3
#define prometheus_MetricMetadata_type_tag       1
#define prometheus_MetricMetadata_metric_family_name_tag 2
#define prometheus_MetricMetadata_help_tag       4
#define prometheus_MetricMetadata_unit_tag       5

/* Struct field encoding specification for nanopb */
#define prometheus_MetricMetadata_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, UENUM,    type,              1) \
X(a, CALLBACK, SINGULAR, STRING,   metric_family_name,   2) \
X(a, CALLBACK, SINGULAR, STRING,   help,              4) \
X(a, CALLBACK, SINGULAR, STRING,   unit,              5)
#define prometheus_MetricMetadata_CALLBACK pb_default_field_callback
#define prometheus_MetricMetadata_DEFAULT NULL

#define prometheus_WriteRequest_FIELDLIST(X, a) \
X(a, CALLBACK, REPEATED, MESSAGE,  timeseries,        1) \
X(a, CALLBACK, REPEATED, MESSAGE,  metadata,          3)
#define prometheus_WriteRequest_CALLBACK pb_default_field_callback
#define prometheus_WriteRequest_DEFAULT NULL
#define prometheus_WriteRequest_timeseries_MSGTYPE prometheus_TimeSeries
#define prometheus_WriteRequest_metadata_MSGTYPE prometheus_MetricMetadata

extern const pb_msgdesc_t prometheus_MetricMetadata_msg;
extern const pb_msgdesc_t prometheus_WriteRequest_msg;

/* Defines for backwards compatibility with code written before nanopb-0.4.0 */
#define prometheus_MetricMetadata_fields &prometheus_MetricMetadata_msg
#define prometheus_WriteRequest_fields &prometheus_WriteRequest_msg

/* Maximum encoded size of messages (where known) */
/* prometheus_MetricMetadata_size depends on runtime parameters */
/* prometheus_WriteRequest_size depends on runtime parameters */

#ifdef __cplusplus
} /* extern "C" */
#endif

#endif
